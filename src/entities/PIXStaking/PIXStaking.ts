// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EpochAdded extends ethereum.Event {
  get params(): EpochAdded__Params {
    return new EpochAdded__Params(this);
  }
}

export class EpochAdded__Params {
  _event: EpochAdded;

  constructor(event: EpochAdded) {
    this._event = event;
  }

  get epochId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalEpochReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ModeratorUpdated extends ethereum.Event {
  get params(): ModeratorUpdated__Params {
    return new ModeratorUpdated__Params(this);
  }
}

export class ModeratorUpdated__Params {
  _event: ModeratorUpdated;

  constructor(event: ModeratorUpdated) {
    this._event = event;
  }

  get moderator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PIXStaked extends ethereum.Event {
  get params(): PIXStaked__Params {
    return new PIXStaked__Params(this);
  }
}

export class PIXStaked__Params {
  _event: PIXStaked;

  constructor(event: PIXStaked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PIXUnstaked extends ethereum.Event {
  get params(): PIXUnstaked__Params {
    return new PIXUnstaked__Params(this);
  }
}

export class PIXUnstaked__Params {
  _event: PIXUnstaked;

  constructor(event: PIXUnstaked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardClaimedToken extends ethereum.Event {
  get params(): RewardClaimedToken__Params {
    return new RewardClaimedToken__Params(this);
  }
}

export class RewardClaimedToken__Params {
  _event: RewardClaimedToken;

  constructor(event: RewardClaimedToken) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PIXStaking extends ethereum.SmartContract {
  static bind(address: Address): PIXStaking {
    return new PIXStaking("PIXStaking", address);
  }

  DURATION(): BigInt {
    let result = super.call("DURATION", "DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DURATION", "DURATION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentEpochEndTimestamp(): BigInt {
    let result = super.call(
      "currentEpochEndTimestamp",
      "currentEpochEndTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentEpochEndTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentEpochEndTimestamp",
      "currentEpochEndTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedBatch(tokenIds: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "earnedBatch",
      "earnedBatch(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(tokenIds)]
    );

    return result[0].toBigIntArray();
  }

  try_earnedBatch(tokenIds: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "earnedBatch",
      "earnedBatch(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(tokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  earnedByAccount(account: Address): BigInt {
    let result = super.call(
      "earnedByAccount",
      "earnedByAccount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_earnedByAccount(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedByAccount",
      "earnedByAccount(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedReward(tokenId: BigInt): BigInt {
    let result = super.call("earnedReward", "earnedReward(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_earnedReward(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "earnedReward",
      "earnedReward(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPushedRewards(pixSize: i32, pixCategory: i32, epochId: BigInt): BigInt {
    let result = super.call(
      "getPushedRewards",
      "getPushedRewards(uint8,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory)),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPushedRewards(
    pixSize: i32,
    pixCategory: i32,
    epochId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPushedRewards",
      "getPushedRewards(uint8,uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory)),
        ethereum.Value.fromUnsignedBigInt(epochId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardPerToken(pixSize: i32, pixCategory: i32): BigInt {
    let result = super.call(
      "getRewardPerToken",
      "getRewardPerToken(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory))
      ]
    );

    return result[0].toBigInt();
  }

  try_getRewardPerToken(
    pixSize: i32,
    pixCategory: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardPerToken",
      "getRewardPerToken(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedNFTsLength(user: Address): BigInt {
    let result = super.call(
      "getStakedNFTsLength",
      "getStakedNFTsLength(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getStakedNFTsLength(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakedNFTsLength",
      "getStakedNFTsLength(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokensStaked(pixSize: i32, pixCategory: i32): BigInt {
    let result = super.call(
      "getTokensStaked",
      "getTokensStaked(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory))
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokensStaked(
    pixSize: i32,
    pixCategory: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokensStaked",
      "getTokensStaked(uint8,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixSize)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pixCategory))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isStaked(tokenId: BigInt): boolean {
    let result = super.call("isStaked", "isStaked(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isStaked(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStaked", "isStaked(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moderators(param0: Address): boolean {
    let result = super.call("moderators", "moderators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_moderators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("moderators", "moderators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftRewardPerTierPaid(param0: BigInt): BigInt {
    let result = super.call(
      "nftRewardPerTierPaid",
      "nftRewardPerTierPaid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_nftRewardPerTierPaid(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftRewardPerTierPaid",
      "nftRewardPerTierPaid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodFinish(): BigInt {
    let result = super.call("periodFinish", "periodFinish():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodFinish(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodFinish", "periodFinish():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pixNFT(): Address {
    let result = super.call("pixNFT", "pixNFT():(address)", []);

    return result[0].toAddress();
  }

  try_pixNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("pixNFT", "pixNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pushRewardNextEpochsPercentages(param0: i32, param1: BigInt): BigInt {
    let result = super.call(
      "pushRewardNextEpochsPercentages",
      "pushRewardNextEpochsPercentages(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_pushRewardNextEpochsPercentages(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pushRewardNextEpochsPercentages",
      "pushRewardNextEpochsPercentages(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardDistributor(): Address {
    let result = super.call(
      "rewardDistributor",
      "rewardDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_rewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardDistributor",
      "rewardDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerTierStored(): BigInt {
    let result = super.call(
      "rewardPerTierStored",
      "rewardPerTierStored():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerTierStored(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerTierStored",
      "rewardPerTierStored():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPercentagePaidPerTokensStaked(param0: BigInt): BigInt {
    let result = super.call(
      "rewardPercentagePaidPerTokensStaked",
      "rewardPercentagePaidPerTokensStaked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardPercentagePaidPerTokensStaked(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPercentagePaidPerTokensStaked",
      "rewardPercentagePaidPerTokensStaked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPercentagesDenominator(): BigInt {
    let result = super.call(
      "rewardPercentagesDenominator",
      "rewardPercentagesDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPercentagesDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPercentagesDenominator",
      "rewardPercentagesDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRate(): BigInt {
    let result = super.call("rewardRate", "rewardRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardRate", "rewardRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewards(param0: BigInt): BigInt {
    let result = super.call("rewards", "rewards(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewards", "rewards(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedNFTs(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "stakedNFTs",
      "stakedNFTs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_stakedNFTs(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakedNFTs",
      "stakedNFTs(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakers(param0: BigInt): Address {
    let result = super.call("stakers", "stakers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_stakers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("stakers", "stakers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenTotalRewardLastClaim(param0: BigInt): BigInt {
    let result = super.call(
      "tokenTotalRewardLastClaim",
      "tokenTotalRewardLastClaim(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenTotalRewardLastClaim(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenTotalRewardLastClaim",
      "tokenTotalRewardLastClaim(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTiers(): BigInt {
    let result = super.call("totalTiers", "totalTiers():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTiers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTiers", "totalTiers():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddEpochRewardsCall extends ethereum.Call {
  get inputs(): AddEpochRewardsCall__Inputs {
    return new AddEpochRewardsCall__Inputs(this);
  }

  get outputs(): AddEpochRewardsCall__Outputs {
    return new AddEpochRewardsCall__Outputs(this);
  }
}

export class AddEpochRewardsCall__Inputs {
  _call: AddEpochRewardsCall;

  constructor(call: AddEpochRewardsCall) {
    this._call = call;
  }

  get epochTotalReward(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get epochDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddEpochRewardsCall__Outputs {
  _call: AddEpochRewardsCall;

  constructor(call: AddEpochRewardsCall) {
    this._call = call;
  }
}

export class ClaimAllCall extends ethereum.Call {
  get inputs(): ClaimAllCall__Inputs {
    return new ClaimAllCall__Inputs(this);
  }

  get outputs(): ClaimAllCall__Outputs {
    return new ClaimAllCall__Outputs(this);
  }
}

export class ClaimAllCall__Inputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ClaimAllCall__Outputs {
  _call: ClaimAllCall;

  constructor(call: ClaimAllCall) {
    this._call = call;
  }
}

export class ClaimBatchCall extends ethereum.Call {
  get inputs(): ClaimBatchCall__Inputs {
    return new ClaimBatchCall__Inputs(this);
  }

  get outputs(): ClaimBatchCall__Outputs {
    return new ClaimBatchCall__Outputs(this);
  }
}

export class ClaimBatchCall__Inputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ClaimBatchCall__Outputs {
  _call: ClaimBatchCall;

  constructor(call: ClaimBatchCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _pixt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pixNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializePoolRewardsCall extends ethereum.Call {
  get inputs(): InitializePoolRewardsCall__Inputs {
    return new InitializePoolRewardsCall__Inputs(this);
  }

  get outputs(): InitializePoolRewardsCall__Outputs {
    return new InitializePoolRewardsCall__Outputs(this);
  }
}

export class InitializePoolRewardsCall__Inputs {
  _call: InitializePoolRewardsCall;

  constructor(call: InitializePoolRewardsCall) {
    this._call = call;
  }

  get pixSize(): Array<i32> {
    return this._call.inputValues[0].value.toI32Array();
  }

  get pixCategory(): Array<i32> {
    return this._call.inputValues[1].value.toI32Array();
  }

  get rewardPercentages(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get currentStakedTokens(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _rewardPercentagesDenominator(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializePoolRewardsCall__Outputs {
  _call: InitializePoolRewardsCall;

  constructor(call: InitializePoolRewardsCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetModeratorCall extends ethereum.Call {
  get inputs(): SetModeratorCall__Inputs {
    return new SetModeratorCall__Inputs(this);
  }

  get outputs(): SetModeratorCall__Outputs {
    return new SetModeratorCall__Outputs(this);
  }
}

export class SetModeratorCall__Inputs {
  _call: SetModeratorCall;

  constructor(call: SetModeratorCall) {
    this._call = call;
  }

  get moderator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetModeratorCall__Outputs {
  _call: SetModeratorCall;

  constructor(call: SetModeratorCall) {
    this._call = call;
  }
}

export class SetPushRewardNextEpochsPercentagesCall extends ethereum.Call {
  get inputs(): SetPushRewardNextEpochsPercentagesCall__Inputs {
    return new SetPushRewardNextEpochsPercentagesCall__Inputs(this);
  }

  get outputs(): SetPushRewardNextEpochsPercentagesCall__Outputs {
    return new SetPushRewardNextEpochsPercentagesCall__Outputs(this);
  }
}

export class SetPushRewardNextEpochsPercentagesCall__Inputs {
  _call: SetPushRewardNextEpochsPercentagesCall;

  constructor(call: SetPushRewardNextEpochsPercentagesCall) {
    this._call = call;
  }

  get pixSize(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _pushRewardNextEpochsPercentages(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetPushRewardNextEpochsPercentagesCall__Outputs {
  _call: SetPushRewardNextEpochsPercentagesCall;

  constructor(call: SetPushRewardNextEpochsPercentagesCall) {
    this._call = call;
  }
}

export class SetRewardDistributorCall extends ethereum.Call {
  get inputs(): SetRewardDistributorCall__Inputs {
    return new SetRewardDistributorCall__Inputs(this);
  }

  get outputs(): SetRewardDistributorCall__Outputs {
    return new SetRewardDistributorCall__Outputs(this);
  }
}

export class SetRewardDistributorCall__Inputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }

  get distributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardDistributorCall__Outputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }
}

export class SetRewardPercentagePaidPerTokensStakedCall extends ethereum.Call {
  get inputs(): SetRewardPercentagePaidPerTokensStakedCall__Inputs {
    return new SetRewardPercentagePaidPerTokensStakedCall__Inputs(this);
  }

  get outputs(): SetRewardPercentagePaidPerTokensStakedCall__Outputs {
    return new SetRewardPercentagePaidPerTokensStakedCall__Outputs(this);
  }
}

export class SetRewardPercentagePaidPerTokensStakedCall__Inputs {
  _call: SetRewardPercentagePaidPerTokensStakedCall;

  constructor(call: SetRewardPercentagePaidPerTokensStakedCall) {
    this._call = call;
  }

  get _rewardPercentagePaidPerTokensStaked(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetRewardPercentagePaidPerTokensStakedCall__Outputs {
  _call: SetRewardPercentagePaidPerTokensStakedCall;

  constructor(call: SetRewardPercentagePaidPerTokensStakedCall) {
    this._call = call;
  }
}

export class SetRewardTokenCall extends ethereum.Call {
  get inputs(): SetRewardTokenCall__Inputs {
    return new SetRewardTokenCall__Inputs(this);
  }

  get outputs(): SetRewardTokenCall__Outputs {
    return new SetRewardTokenCall__Outputs(this);
  }
}

export class SetRewardTokenCall__Inputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }

  get rewardTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardTokenCall__Outputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
